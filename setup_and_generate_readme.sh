#!/bin/bash

# --- Configuration & Setup ---
CONFIG_FILE="config.json"
README_FILE="README.md"
SECTIONS_DIR="sections"
CASE_STUDY_DIR="case_study"
SCREENSHOTS_DIR="screenshots"

# Ensure jq is installed
if ! command -v jq &> /dev/null
then
    echo "jq is not installed. Please install it: sudo apt-get install jq"
    exit 1
fi

# --- Create Directories ---
echo "Creating necessary directories..."
mkdir -p "$SECTIONS_DIR"
mkdir -p "$CASE_STUDY_DIR"
mkdir -p "$SCREENSHOTS_DIR"
echo "Directories created."
echo ""

# --- Create config.json ---
echo "Creating config.json..."
cat << 'EOF' > "$CONFIG_FILE"
{
  "project_title": "freelance-script-system",
  "project_tagline": "Your Content Co-Pilot for Scripts That Actually Hit",
  "sections": [
    {
      "id": "about-me",
      "title": "About Me",
      "file": "sections/about_me.md"
    },
    {
      "id": "what-i-offer",
      "title": "What I Offer",
      "file": "sections/what_i_offer.md"
    },
    {
      "id": "how-i-work",
      "title": "How I Work",
      "file": "sections/how_i_work.md"
    },
    {
      "id": "ownership--licensing",
      "title": "Ownership & Licensing",
      "file": "sections/ownership_licensing.md"
    },
    {
      "id": "background--tech",
      "title": "Background & Tech",
      "file": "sections/background_tech.md"
    },
    {
      "id": "sample-script-showcase",
      "title": "See It for Yourself",
      "file": "sections/sample_script_showcase.md",
      "link": "https://yourwebsite.com/download/sample_script.pdf"
    },
    {
      "id": "case-study-main",
      "title": "ü§Ø The Proof: From 2 Words to Full Content Strategy!",
      "description": "Witness my system in action. Below is a slightly formatted (for readability, not content alteration) transcript of a real-time, unedited test, showing how a two-word prompt evolved into a complete content strategy, fueled by AI and guided by human expertise.",
      "phases": [
        {
          "id": "phase1_ideation_selection",
          "title": "Phase 1: Sparking the Idea & Initial Selection üß†",
          "transcript_file": "case_study/transcript_phase1_ideation_selection.md",
          "screenshots": [
            {"file": "screenshots/1idea.png", "alt": "Plotform UI: Initial 'How-to' Input"},
            {"file": "screenshots/2generated.png", "alt": "Plotform UI: Generated Ideas & Selection"}
          ]
        },
        {
          "id": "phase2_script_parameters",
          "title": "Phase 2: Setting Script Parameters & Directives ‚öôÔ∏è",
          "transcript_file": "case_study/transcript_phase2_script_parameters.md",
          "screenshots": [
            {"file": "screenshots/3script_input.png", "alt": "Plotform UI: Main Script Input & Mandatory Mentions"},
            {"file": "screenshots/4options.png", "alt": "Plotform UI: Key Generation Parameters"},
            {"file": "screenshots/5custom.png", "alt": "Plotform UI: Hook & Call-to-Action Selections"},
            {"file": "screenshots/6formatting.png", "alt": "Plotform UI: Formatting & Visual Guidance Options"}
          ]
        },
        {
          "id": "phase3_script_output_review",
          "title": "Phase 3: The Script - Output & Review ‚úÖ",
          "transcript_file": "case_study/transcript_phase3_script_output_review.md",
          "script_output_file": "case_study/plotform_script_20250623_1626.md",
          "script_output_description": "A screenshot simply can't do justice to the depth and detail of the full script generated by my system. Below, you'll find the complete, production-ready script for 'Morning Routine Revamp,' showcasing all the custom formatting, visual guidance, and strategic inclusions."
        },
        {
          "id": "phase4_monetization",
          "title": "Phase 4: Strategic Monetization Roadmap üí∏",
          "transcript_file": "case_study/transcript_phase4_monetization_dialogue.md",
          "screenshots": [
            {"file": "screenshots/monetization_map_output.png", "alt": "Plotform Output: Generated Monetization Roadmap"}
          ]
        },
        {
          "id": "phase5_audience_ideas",
          "title": "Phase 5: Audience-Driven Follow-Up Ideas üìà",
          "transcript_file": "case_study/transcript_phase5_comments_ideas_dialogue.md",
          "screenshots": [
            {"file": "screenshots/user_comments_example.png", "alt": "Simulated User Comments Input"},
            {"file": "screenshots/follow_up_ideas_output.png", "alt": "Plotform Output: Generated Follow-Up Ideas"}
          ]
        }
      ]
    },
    {
      "id": "final-note",
      "title": "A Final Note",
      "file": "sections/final_note.md"
    }
  ]
}
EOF
echo "config.json created."
echo ""

# --- Populate Section Markdown Files ---
echo "Populating static section files..."
cat << 'EOF' > "$SECTIONS_DIR/about_me.md"
I'm Jeff G., a scriptwriter, systems thinker, and creator of a powerful freelance video scripting engine I simply refer to as **my system**. It's the product of thousands of hours of refining prompts, testing structures, reworking logic, and delivering high-performing video scripts across formats, platforms, and industries. My mission is simple: deliver script content that‚Äôs as close to viral-ready as it gets ‚Äî without fluff, without hype, and without dragging your brand through generic AI mud.
When content creators hit burnout or suffer writer‚Äôs block, **my system** steps in. I generate niche-specific ideas, ready-to-shoot scripts, and follow-up concepts that align with your audience, voice, and goals. If you‚Äôre working with past scripts that missed the mark, I offer professional rewrites, monetization analysis, and even next-gen insight based on your own viewer feedback and comments.
EOF

cat << 'EOF' > "$SECTIONS_DIR/what_i_offer.md"
‚úçÔ∏è Script Writing ‚Äì Tailored to Your Needs
Based on your idea, one of mine, or built from scratch with audience targeting
Delivered in a shootable, structured, and polished format
Optional: scene headings, timing, visual prompts, tone adjustments, CTA insertions
Includes revision opportunities ‚Äî you get a chance to refine it to your liking
üîÅ Script Revision ‚Äì Missed the Mark?
Do you have a script that needs a lift? That‚Äôs exactly what this service is for.
You provide the input ‚Äî or as an optional service, I analyze the script myself ‚Äî and deliver a clean, upgraded rewrite
Includes a revision of the revision if needed
This isn't tweaking lines ‚Äî this is a structural, tonal, and conceptual overhaul when necessary
üí∏ Monetary Roadmap ‚Äì Your Script‚Äôs Earning Potential
A truly custom roadmap that turns your content into an income engine
I break down monetization strategies based on your script: affiliate links, products, services, merch, memberships, and more
You get clear, actionable options ‚Äî not generic advice
Standalone or Add-On
Whether I wrote the script or not ‚Äî even if it came from a competitor ‚Äî my **Monetization Roadmap** can still give your content the edge to earn that extra bread.
üöÄ Idea Architect ‚Äì Fuel for Your Next Hit
If you're out of ideas, just send me your niche and I‚Äôll return with 5 smart, content-ready ideas
Or if you already have a video and viewer comments, I‚Äôll analyze them with your script and deliver **excellent, audience-aligned follow-up script ideas**
Need one of those ideas turned into a script? I‚Äôll write it to knock your socks off
üìà Viewer Feedback to Script Engine
Send your uploaded video‚Äôs script or transcript + viewer comments
I‚Äôll analyze tone, engagement trends, questions, and sentiment
You‚Äôll receive **5 new follow-up script ideas** tailored to that specific audience reaction ‚Äî without having to read a single troll comment
All I need is the original script and viewer comments ‚Äî and I‚Äôll return with 5 script ideas that are or should be game changers
EOF

cat << 'EOF' > "$SECTIONS_DIR/how_i_work.md"
Confidentiality First: No client data is saved or reused. Every session ends with a wipe.
You Own It All: Every idea, script, rewrite, and concept I provide is 100% yours. You paid for it, you own it. I hold no claims.
No Ego: I‚Äôm not the star ‚Äî you are. I‚Äôm just here to help you shine.
Revisions Included: All work includes at least one revision opportunity. That‚Äôs separate from the Script Rewrites service. This service also includes at least one revision to ensure it truly fits your vision.
Responsibility Reminder: Once the script is delivered, it‚Äôs your job to fact-check, stylize, and make it yours. I provide you with a **ready-to-shoot script** ‚Äî but it‚Äôs your style and flair that will make it sing.
EOF

cat << 'EOF' > "$SECTIONS_DIR/ownership_licensing.md"
Payment for services grants you **complete and exclusive ownership** of the final deliverables I create for you.
You have **full rights to use, modify, distribute, and monetize** the scripts and ideas provided.
My system, tools, methods, and software remain my intellectual property and are not transferred.
This means **no rights to my proprietary system** are given or implied through purchase or usage.
EOF

cat << 'EOF' > "$SECTIONS_DIR/background_tech.md"
My system is custom-built and constantly evolving
I've engineered it from scratch through trial, sweat, and absurd persistence
It‚Äôs currently being rewritten in Vue and FastAPI for scalability, UI improvements, and smoother customer experience
While part of my process is software-assisted, **every client output is reviewed, tailored, and finalized by me**
EOF

cat << 'EOF' > "$SECTIONS_DIR/sample_script_showcase.md"
Before you even hit ‚ÄúContact,‚Äù preview the kind of firepower I bring to the table:
Excerpt from a Full-Length Script ‚Äî Written by My System
(Input: ‚ÄúTech Reviews‚Äù ‚Üí System-chosen concept: ‚ÄúGadget of the Month‚Äù)
üß† AI-Analyzed
‚úçÔ∏è Human-Finalized
üéØ Creator-Ready
‚ÄúIs this the tech sleeper hit of the year, or just another overpriced paperweight? Let‚Äôs find out‚Ä¶‚Äù
EOF

cat << 'EOF' > "$SECTIONS_DIR/final_note.md"
Many clients have told me I should charge a lot more for what I offer ‚Äî maybe I should. But I believe in creators getting their fair shot. I want my piece of the pie, sure, but I‚Äôm not here to take the whole damn bakery. I know how hard content creation is. I see it. I respect it. And I built **my system** to serve it.
Let‚Äôs work.
EOF
echo "Static section files populated."
echo ""

# --- Populate Case Study Markdown Files ---
echo "Populating case study transcript files..."

# Phase 1: Ideation & Selection
cat << 'EOF' > "$CASE_STUDY_DIR/transcript_phase1_ideation_selection.md"
**Our goal:** To demonstrate Plotform's capability from a minimal prompt, picking a tough challenge.

**Me (as Gemini):** "what is the most watched category on youtube"

*(...conversation about categories leading to "How-to")*

**Me (as Gemini):** "Okay, Plotform has generated 5 specific script ideas based on the 'How-to' core concept:"
1. **Morning Routine Revamp**: A step-by-step guide on how to create a fresh and productive morning routine, incorporating mindfulness, exercise, and healthy eating habits, all within a 30-minute timeframe.
2. **Sustainable Living Hacks**: A tutorial showcasing easy and creative ways to reduce waste, reuse everyday items, and implement eco-friendly practices in daily life, making sustainability accessible to everyone.
3. **Fresh Fashion on a Budget**: A how-to video on updating your wardrobe without breaking the bank, featuring thrift store shopping tips, DIY fashion hacks, and styling advice for creating fresh, trendy outfits.
4. **Wellness for Beginners**: An introductory guide to wellness, covering the basics of meditation, yoga, and nutrition, and providing a simple, 7-day plan for incorporating these practices into a busy lifestyle.
5. **Home Decor Refresh**: A tutorial on how to give your living space a fresh new look without spending a fortune, including DIY decor projects, second-hand shopping tips, and advice on rearranging furniture for a revitalized atmosphere.

**Me (as Gemini):** "From these five excellent options, I will choose **'Morning Routine Revamp'** for our script."
EOF

# Phase 2: Script Parameters
cat << 'EOF' > "$CASE_STUDY_DIR/transcript_phase2_script_parameters.md"
**My Goal:** To push Plotform's ability to integrate many specific, demanding instructions into a short script while maintaining tone and flow.

**Me (as Gemini):** "Now, acting as a content creator, here are the specific directions I'd give Plotform for generating the script:"
* **Hook Type:** Relatable Scenario Hook (Start with the common struggle of morning chaos).
* **Mandatory Inclusions/Specific Mentions:**
    * Emphasize "realistic" and "sustainable" changes.
    * Mention that small changes lead to big results.
    * Specifically include: "Hydration first," "5-minute stretch," and "quick gratitude journal."
    * Include a call to action to share their favorite morning routine hack in the comments.
* **Call-to-Action Type:** Ask a question / Engage the audience.
* **Formatting & Structure Options:**
    * Use Scene Headings (Checked)
    * Use Parentheticals (Checked)
    * Use Character Names (Checked)
    * Use Transitions (Checked)
    * Estimate Scene Times (Checked)
    * Estimate Total Time (Checked)
* **Visual Element Guidance:** Both Video & Image (Checked)
* **Key Generation Parameters:**
    * **Topic / Niche:** Productivity / Lifestyle
    * **Target Audience:** Busy Young Professionals (25-40)
    * **Video Style:** Educational / Inspirational
    * **Tone:** Encouraging, energizing, supportive, and practical.
    * **Preferred Length:** Short (1-5 min) - Aim for around 4-5 minutes.
    * **Intended Narration Style:** Host-voiced (Direct address, conversational, upbeat)
    * **Platform:** YouTube (Standard)
    * **Generate Hashtags & Keywords for main script:** (Checked)

*(...Optional: Include our brief discussion about "that's a lot of info to get in a short" and your decision to proceed with "Short" length.)*
EOF

# Phase 3: Script Output & Review (The full script text)
cat << 'EOF' > "$CASE_STUDY_DIR/transcript_phase3_script_output_review.md"
**Our Goal:** To see if Plotform could successfully deliver a high-quality, fully instructed script within the tight "Short (1-5 min)" constraint.

**Me (as Gemini):** "Okay, I have the full script for 'Morning Routine Revamp' generated by Plotform, based on all the specific parameters and instructions we provided. This is the script from file `plotform_script_20250623_1626.txt`."

*(You can add a line here like: "See the full generated script below:")*
EOF

cat << 'EOF' > "$CASE_STUDY_DIR/plotform_script_20250623_1626.md"
**Scene 1: Introduction (0:00 - 0:30)**
(Upbeat background music starts playing. The host, JEN, appears on screen with a friendly smile)
Jen: (directly addressing the camera) Hey there, busy professionals!
Are you tired of waking up feeling groggy and unprepared to tackle the day? You're not alone.
Many of us struggle with morning chaos, hitting the snooze button repeatedly, and rushing out the door without a clear plan.
But what if you could transform your mornings into a fresh and productive start?
Let's dive into a step-by-step guide on how to create a realistic and sustainable morning routine, all within a 30-minute timeframe.
**Scene 2: Setting the Foundation (0:30 - 1:15)**
(Visuals of a person waking up and stretching appear on screen)
Jen: (conversational tone) Emphasize "realistic" and "sustainable" changes.
We're not talking about drastic overhauls, but small, achievable adjustments that will add up to make a big difference.
The key is to start small and be consistent. Mention that small changes lead to big results.
By incorporating a few simple habits into your morning routine, you'll be amazed at how much more energized and focused you'll feel.
**Scene 3: Hydration and Movement (1:15 - 2:00)**
(Visuals of a person drinking water and stretching appear on screen)
Jen: (encouragingly) So, let's get started!
Hydration first: begin by drinking a full glass of water as soon as you wake up.
This will help rehydrate your body after a night of sleep.
Next, take a 5-minute stretch to get your blood flowing and loosen up those muscles.
You can do some simple yoga poses or just stretch your arms and legs.
This will help increase your energy levels and prepare your body for the day ahead.
**Scene 4: Mindfulness and Gratitude (2:00 - 2:45)**
(Visuals of a person meditating and journaling appear on screen)
Jen: (supportively) Now, let's take a minute to focus on mindfulness and gratitude.
Take a few deep breaths, and then grab a quick gratitude journal to write down three things you're thankful for today.
This could be something as simple as a good cup of coffee or a beautiful sunrise.
Reflecting on what you're grateful for will help shift your focus to the positive and set a constructive tone for the day.
**Scene 5: Putting it all Together (2:45 - 3:30)**
(Visuals of a person enjoying a healthy breakfast appear on screen)
Jen: (practically) So, what does a 30-minute morning routine look like?
Here's an example: start with hydration, followed by a 5-minute stretch, and then take a minute to reflect on what you're grateful for.
Finally, enjoy a healthy breakfast to fuel your body for the day ahead.
Remember, the goal is to create a realistic and sustainable routine that works for you, not against you.
**Scene 6: Call to Action (3:30 - 4:00)**
(Visuals of a person sharing their morning routine on social media appear on screen)
Jen: (engagingly) Now, we want to hear from you!
What's your favorite morning routine hack? Share with us in the comments below!
Do you have a secret to starting your day on a positive note?
Let's build a community of like-minded individuals who are committed to making the most of their mornings.
**Scene 7: Conclusion (4:00 - 4:30)**
(Closing shot of Jen appearing on screen with a friendly smile)
Jen: (encouragingly) Thanks for joining me on this journey to revamp your morning routine!
Remember, small changes lead to big results. Start with one or two new habits and see how they make a difference in your life.
Don't forget to subscribe to our channel for more productivity and lifestyle tips. See you in the next video!
**Total Time: 4:30**

**Visual Element Guidance:**
- Use a mix of video and image cues throughout the script to keep the visuals engaging and dynamic.
- Incorporate text overlays to highlight key points, such as "Hydration first" and "5-minute stretch."
- Use colorful graphics and animations to illustrate the benefits of a morning routine and make the content more engaging.
**SEO Keywords and Hashtags:**
#MorningRoutine #ProductivityHacks #LifestyleTips #HealthyHabits #Mindfulness #GratitudeJournal #Hydration #Exercise #HealthyEating #SustainableChanges #RealisticGoals #BusyProfessionals #YouTube #LifestyleChannel #ProductivityChannel #InspirationalContent #EducationalContent #ShortVideos #RelatableScenario #CommentEngagement #ShareYourStory

---
**IMPORTANT DISCLAIMER**
This script was generated with AI assistance.
The user is solely responsible for verifying all facts, figures, technical specifications, and safety procedures before production.
Always conduct your own research.
---
EOF

echo "Case study transcript files and script content populated."
echo ""

# --- Final README Generation ---
echo "Generating README.md..."

# This part is a direct copy from the earlier generate_readme.sh script
# We need to ensure the anchor generation is robust.
# The previous error "Cannot index array with string "phases"" was due to jq trying to process
# .phases[] on sections that don't have it. The current logic in this heredoc
# should be robust as it checks SECTION_ID before processing phases.

# Loop through top-level sections
jq -c '.sections[]' "$CONFIG_FILE" | while read -r section_json_str; do
    SECTION_ID=$(echo "$section_json_str" | jq -r .id)
    SECTION_TITLE=$(echo "$section_json_str" | jq -r .title)
    # Convert title to GitHub anchor format (lowercase, hyphens instead of spaces/symbols)
    ANCHOR_ID=$(echo "$SECTION_TITLE" | iconv -t ascii//TRANSLIT | sed -E 's/[^a-zA-Z0-9]+|-+$/-/g' | tr '[:upper:]' '[:lower:]' | sed -E 's/^-+|-+$//g')

    # Add section anchor and title
    echo "<a name=\"${ANCHOR_ID}\"></a>" >> "$README_FILE"
    echo "### ${SECTION_TITLE}" >> "$README_FILE"
    echo "" >> "$README_FILE"

    # Append content from section's MD file
    # Only append if 'file' key exists and is not null/empty for non-case-study sections
    if [ "$SECTION_ID" != "case-study-main" ]; then
        SECTION_FILE=$(jq -r ".file" <<< "$section_json_str")
        if [ -n "$SECTION_FILE" ] && [ "$SECTION_FILE" != "null" ] && [ -f "$SECTION_FILE" ]; then
            cat "$SECTION_FILE" >> "$README_FILE"
            echo "" >> "$README_FILE" # Add newline
        else
            # For debugging, you could uncomment this:
            # echo "_WARNING: Content file not found or not specified for section ID: ${SECTION_ID}_" >> "$README_FILE"
            : # Do nothing, just skip appending file content for this section
        fi
    fi
    
    # Handle special link for 'See It for Yourself'
    if [ "$SECTION_ID" == "sample-script-showcase" ]; then
        SAMPLE_LINK=$(jq -r .link <<< "$section_json_str")
        echo "‚û°Ô∏è [Download Sample Script PDF](${SAMPLE_LINK})" >> "$README_FILE"
        echo "" >> "$README_FILE"
    fi

    # Handle Case Study section
    if [ "$SECTION_ID" == "case-study-main" ]; then
        echo "$(jq -r .description <<< "$section_json_str")" >> "$README_FILE"
        echo "" >> "$README_FILE"

        # Loop through phases within the case study
        # Explicitly get the 'phases' array from the case-study-main section
        CASE_STUDY_PHASES=$(echo "$section_json_str" | jq -c '.phases[]')

        echo "$CASE_STUDY_PHASES" | while read -r phase_json_str; do
            PHASE_ID=$(echo "$phase_json_str" | jq -r .id)
            PHASE_TITLE=$(echo "$phase_json_str" | jq -r .title)
            # Generating anchor ID safely
            PHASE_ANCHOR_ID=$(echo "$PHASE_TITLE" | iconv -t ascii//TRANSLIT | sed -E 's/[^a-zA-Z0-9]+|-+$//g' | tr '[:upper:]' '[:lower:]' | sed -E 's/^-+|-+$//g')

            echo "<a name=\"${PHASE_ANCHOR_ID}\"></a>" >> "$README_FILE"
            echo "#### ${PHASE_TITLE}" >> "$README_FILE"
            echo "" >> "$README_FILE"

            # Append transcript excerpt for the phase
            TRANSCRIPT_FILE=$(echo "$phase_json_str" | jq -r .transcript_file)
            if [ -f "$TRANSCRIPT_FILE" ]; then
                cat "$TRANSCRIPT_FILE" >> "$README_FILE"
                echo "" >> "$README_FILE"
            else
                echo "_Transcript file not found: ${TRANSCRIPT_FILE}_" >> "$README_FILE"
                echo "" >> "$README_FILE"
            fi

            # Handle either screenshots or a full script output file
            if [ "$(echo "$phase_json_str" | jq -r '.screenshots | length')" -gt 0 ]; then
                # If screenshots exist for this phase, embed them
                jq -c '.screenshots[]' <<< "$phase_json_str" | while read -r screenshot_json; do
                    IMG_FILE=$(echo "$screenshot_json" | jq -r .file)
                    IMG_ALT=$(echo "$screenshot_json" | jq -r .alt)
                    echo "${IMG_ALT}" >> "$README_FILE" # Print description
                    echo "![${IMG_ALT}](.${IMG_FILE})" >> "$README_FILE" # Embed image
                    echo "" >> "$README_FILE"
                done
            elif [ -n "$(echo "$phase_json_str" | jq -r .script_output_file 2>/dev/null)" ]; then # Check if script_output_file exists
                # If a script output file exists, embed its content
                SCRIPT_OUTPUT_FILE=$(echo "$phase_json_str" | jq -r .script_output_file)
                SCRIPT_OUTPUT_DESC=$(echo "$phase_json_str" | jq -r .script_output_description)
                echo "${SCRIPT_OUTPUT_DESC}" >> "$README_FILE"
                echo "" >> "$README_FILE"
                echo "\`\`\`markdown" >> "$README_FILE" # Start a markdown code block
                if [ -f "$SCRIPT_OUTPUT_FILE" ]; then
                    cat "$SCRIPT_OUTPUT_FILE" >> "$README_FILE"
                else
                    echo "ERROR: Script file not found: ${SCRIPT_OUTPUT_FILE}" >> "$README_FILE"
                fi
                echo "\`\`\`" >> "$README_FILE" # End the markdown code block
                echo "" >> "$README_FILE"
            fi
            echo "" >> "$README_FILE" # Add newline after each phase
        done # End while read -r phase_json_str
    fi # End if [ "$SECTION_ID" == "case-study-main" ]
    echo "" >> "$README_FILE" # Add newline after each top-level section
done # End while read -r section_json_str

echo "README.md generated successfully!"
echo "Remember to place your screenshots in the 'screenshots/' directory."
echo "You can now push your changes to GitHub!"
